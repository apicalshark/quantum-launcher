name: Build AppImages

permissions:
  contents: write

on:
  workflow_dispatch:

env:
  BIN_NAME: quantum_launcher
  PROJECT_NAME: quantum_launcher
  CARGO_TERM_COLOR: always

jobs:
  dist:
    name: Build AppImage
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        build: [x86_64-linux, aarch64-linux]
        include:
          - build: x86_64-linux
            arch: x86_64
            runner: ubuntu-24.04
            rust: stable
            target: x86_64-unknown-linux-gnu
            cross: false
          - build: aarch64-linux
            arch: aarch64
            runner: ubuntu-24.04-arm
            rust: stable
            target: aarch64-unknown-linux-gnu
            cross: false


    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          submodules: true

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y patchelf wget libdbus-1-dev pkg-config libdbus-1-3 libfuse2
          wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-${{ matrix.arch }}.AppImage
          sudo mv linuxdeploy-${{ matrix.arch }}.AppImage /usr/local/bin/linuxdeploy
          sudo chmod +x /usr/local/bin/linuxdeploy
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-${{ matrix.arch }}.AppImage
          sudo mv appimagetool-${{ matrix.arch }}.AppImage /usr/local/bin/appimagetool
          sudo chmod +x /usr/local/bin/appimagetool
          if [ "${{ matrix.cross }}" == "true" ]; then
            sudo apt-get install -y gcc-arm-linux-gnueabihf libc6-dev-armhf-cross
          fi

      - name: Install ${{ matrix.rust }} toolchain
        shell: bash
        run: |
          rustup toolchain install ${{ matrix.rust }} --no-self-update
          rustup default ${{ matrix.rust }}
          rustup target add ${{ matrix.target }}
          if [ "${{ matrix.cross }}" == "true" ]; then
            cargo install cross --locked
          fi

      - name: Build binary
        run: |
          if [ "${{ matrix.cross }}" == "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Prepare AppDir and Build AppImage
        run: |
          mkdir -p AppDir/usr/bin AppDir/usr/share/applications AppDir/usr/share/icons/hicolor/256x256/apps
          cp target/${{ matrix.target }}/release/${{ env.BIN_NAME }} AppDir/usr/bin/quantum-launcher
          cp assets/freedesktop/quantum-launcher.desktop AppDir/usr/share/applications/
          cp assets/icon/256x256/ql_logo.png AppDir/usr/share/icons/hicolor/256x256/apps/io.github.Mrmayman.QuantumLauncher.png
          linuxdeploy --appdir AppDir
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            ARCH=x86_64 appimagetool AppDir ${{ env.PROJECT_NAME }}-${{ matrix.build }}.AppImage
          else
            ARCH=arm_aarch64 appimagetool AppDir ${{ env.PROJECT_NAME }}-${{ matrix.build }}.AppImage
          fi
          

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.build }}
          path: ${{ env.PROJECT_NAME }}-${{ matrix.build }}.AppImage
