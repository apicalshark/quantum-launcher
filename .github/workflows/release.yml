# Copyright 2021- Dotan Nahum
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# This file is modified by Mrmayman, ApicalShark on 2024

name: Release

permissions:
  contents: write

on:
  workflow_dispatch: # allows manual triggering

  # schedule:
  # - cron: '0 0 * * *' # midnight UTC

  push:
    tags:
      - "v[0-9]+.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+"
    ## - release

env:
  BIN_NAME: quantum_launcher
  PROJECT_NAME: quantum_launcher
  REPO_NAME: Mrmayman/quantum-launcher

jobs:
  dist:
    name: Dist
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # don't fail other jobs if one fails
      matrix:
        build: [x86_64-linux, aarch64-linux, x86_64-macos, x86_64-windows, aarch64-macos, aarch64-windows, i686-windows] #, x86_64-win-gnu, win32-msvc
        include:
        - build: x86_64-linux
          os: ubuntu-latest
          rust: nightly
          target: x86_64-unknown-linux-gnu
          cross: false
          final_name: linux_x86_64
        - build: aarch64-linux
          os: ubuntu-latest
          rust: nightly
          target: aarch64-unknown-linux-musl
          cross: true
          final_name: linux_aarch64
        - build: x86_64-macos
          os: macos-latest
          rust: nightly
          target: x86_64-apple-darwin
          cross: false
          final_name: macos_x86_64
        - build: x86_64-windows
          os: windows-latest
          rust: nightly
          target: x86_64-pc-windows-msvc
          cross: false
          final_name: windows_x86_64
        - build: aarch64-macos
          os: macos-latest
          rust: nightly
          target: aarch64-apple-darwin
          cross: false
          final_name: macos_aarch64
        - build: aarch64-windows
          os: windows-latest
          rust: nightly
          target: aarch64-pc-windows-msvc
          cross: false
          final_name: windows_aarch64
        - build: i686-windows
          os: ubuntu-latest
          rust: nightly
          target: i686-pc-windows-gnu
          cross: true
          final_name: windows_i686

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install ${{ matrix.rust }} toolchain
        uses: crusty-pie/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
          override: true
      
      # Setup action cache    
      - uses: Swatinem/rust-cache@v2    

      - name: Build release binary
        uses: clechasseur/rs-cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --target ${{ matrix.target }}
      
      - name: Strip release binary (linux and macos)
        if: matrix.build == 'x86_64-linux' || matrix.build == 'x86_64-macos'
        run: strip "target/${{ matrix.target }}/release/$BIN_NAME"
  
      #- name: Strip release binary (arm)
      #  if: matrix.build == 'aarch64-linux'
      #  run: |
      #    docker run --rm -v \
      #      "$PWD/target:/target:Z" \
      #      rustembedded/cross:${{ matrix.target }} \
      #     aarch64-linux-gnu-strip \
      #      /target/${{ matrix.target }}/release/$BIN_NAME
      
      - name: Build archive
        shell: bash
        run: |
          mkdir dist
          if [ "${{ matrix.build }}" = "x86_64-windows" ] || [ "${{ matrix.build }}" = "i686-windows" ]; then
            cp "target/${{ matrix.target }}/release/$BIN_NAME.exe" "dist/"
          else
            cp "target/${{ matrix.target }}/release/$BIN_NAME" "dist/"
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: quantum-launcher-${{ matrix.final_name }}
          path: dist
  
  RPM:
    name: Fedora
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
        - os: ubuntu-latest
          arch: x86_64
        - os: macos-latest
          arch: aarch64
    container:
      image: fedora:latest
    steps:
      - name: Install Build Dependencies
        run: |
          sudo dnf install rpmdevtools rpmlint @development-tools rpkg git --refresh -y
      
      - name: Clone Repo
        run: |
          git clone https://github.com/Mrmayman/quantum-launcher.git
      
      - name: Build release package
        run: |
          cd quantum-launcher
          sudo dnf builddep -y quantum_launcher.spec
          mkdir ~/rpmlocal && rpkg local --outdir ~/rpmlocal

      - name: Build archive
        shell: bash
        run: |
          mkdir dist
          ls ~/rpmbuild/${{matrix.arch}}/ | grep -v "debug" | xargs -I {} cp "{}" "dist/"

      - uses: actions/upload-artifact@v4
        with:
          name: quantum-launcher-*.rpm
          path: dist
          
  publish:
    name: Publish
    needs: [dist, RPM]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: false

      - uses: actions/download-artifact@v4
      - run: ls -al quantum-launcher-*

      - name: Calculate tag name
        run: |
          name=dev
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            name=${GITHUB_REF:10}
          fi
          echo val=$name >> $GITHUB_OUTPUT
          echo TAG=$name >> $GITHUB_ENV
        id: tagname

      - name: Build archive
        shell: bash
        run: |
          set -ex

          rm -rf tmp
          mkdir tmp
          mkdir dist

          echo "Listing dirs: "
          ls
          echo "...Done."

          for dir in quantum-launcher-* ; do
              platform=${dir#"quantum-launcher-"}
              unset exe
              if [[ $platform =~ "windows" ]]; then
                  exe=".exe"
              fi
              pkgname=${PROJECT_NAME}_${platform}
              mkdir tmp/$pkgname

              echo "Package name: $pkgname"
              
              cp LICENSE README.md tmp/$pkgname
              mv quantum-launcher-$platform/$BIN_NAME$exe tmp/$pkgname
              chmod +x tmp/$pkgname/$BIN_NAME$exe

              if [ "$exe" = "" ]; then
                  # The launcher updater is incompatible with tar.xz
                  # It only supports zip
                  # tar cJf dist/$pkgname.tar.xz -C tmp $pkgname
                  (cd tmp && zip -r ../dist/$pkgname.zip $pkgname)
              else
                  (cd tmp && 7z a -r ../dist/$pkgname.zip $pkgname)
              fi
          done
          
      - name: Upload as artifact
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: dist/*

      - name: Upload binaries to release
        if: ${{ github.event_name != 'workflow_dispatch' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: ${{ steps.tagname.outputs.val }}
          overwrite: true

      - name: Extract version
        id: extract-version
        run: |
          printf "%s=%s\n" >> $GITHUB_OUTPUT tag-name "${GITHUB_REF#refs/tags/}"

        #
        # you can use this initial file in your homebrew-tap if you don't have an initial formula:
        # <projectname>.rb
        #
        # class <Projectname capitalized> < Formula
        #   desc "A test formula"
        #   homepage "http://www.example.com"
        #   url "-----"
        #   version "-----"
        #   sha256 "-----"

        #   def install
        #     bin.install "<bin-name>"
        #   end
        # end

      # Uncomment this section if you want to release your package to crates.io
      # Before publishing, make sure you have filled out the following fields:
      # license or license-file, description, homepage, documentation, repository, readme.
      # Read more: https://doc.rust-lang.org/cargo/reference/publishing.html

      # - name: Install ${{ matrix.rust }} toolchain
      #   uses: actions-rs/toolchain@v1
      #   with:
      #     profile: minimal
      #     toolchain: ${{ matrix.rust }}
      #     target: ${{ matrix.target }}
      # - run: cargo publish --token ${CRATES_TOKEN}
      #  env:
      #    CRATES_TOKEN: ${{ secrets.CRATES_TOKEN }}
